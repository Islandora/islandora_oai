<?php

/**
 * @file
 *
 * Module used to respond to OAI requests.
 *
 */

/**
 * Implements hook_menu().
 */
function islandora_oai_menu() {
  $items = array();

  $items['admin/islandora/islandora-oai'] = array(
    'title' => 'Islandora OAI',
    'description' => 'Configure the Islandora OAI module',
    'file' => 'includes/admin.form.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_oai_settings'),
    'access arguments' => array('access administration pages'),
  );
  $items[variable_get('oai2_path', 'oai2')] = array(
    'title' => 'OAI2',
    'page callback' => 'islandora_oai_parse_request',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Parses the URL and calls the appropriate function to handle the request
 */
function islandora_oai_parse_request() {
  global $base_url;
  //set compression = TRUE
  $compress = TRUE;

  // Instansiate a new XML Writer object we will pass around
  $writer = new XMLWriter();
  $writer->openURI('php://output');
  $writer->startDocument('1.0', 'utf-8');
  $writer->startElement('OAI-PMH');
  $writer->writeAttribute('xmlns', 'http://www.openarchives.org/OAI/2.0/');
  $writer->writeAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
  $writer->writeAttribute('xsi:schemaLocation', 'http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd');
  $response_date = gmstrftime('%Y-%m-%dT%H:%M:%SZ');
  $writer->writeElement('responseDate', $response_date);

  //arguments are all GET arguments except for Drupal's q
  if (isset($_GET) && sizeof($_GET) != 1) {
    $args = $_GET;
    $verb = $_GET['verb'];
    unset($args['q']);
    unset($args['verb']);
  }
  //allow post requests
  elseif (isset($_POST) && sizeof($_POST) != 0) {
    $args = $_POST;
    $verb = $_POST['verb'];
    unset($args['verb']);
  }
  //error if no GET arguments
  else {
    islandora_oai_add_error('badRequestMethod', $_SERVER['REQUEST_METHOD']);
  }

  // Argument repeated more than once in the GET request
  $arg_list = explode('&', ($_SERVER['QUERY_STRING']));
  $arg_list = (array_count_values($arg_list));

  $repeat_arg = FALSE;

  // Repeating arguments within the request
  foreach ($arg_list as $value) {
    if ($value > 1) {
      islandora_oai_add_error('sameArgument');
      $repeat_arg = TRUE;
      break;
    }
  }

  //set request url
  if (isset($_GET['q'])) {
    $request_url = $base_url . '/' . $_GET['q'];
  }
  else {
    $request_url = $base_url;
  }

  header('Content-Type: text/xml');
  // Add the request
  $writer->startElement('request');

  // Check to see if we have a bad verb
  $error_list = islandora_oai_get_errors();

  if (!count($error_list)) {
    $writer->writeAttribute('verb', $verb);
  }
  $writer->text($request_url);
  $writer->endElement();

  //switch on verb and dispatch requests
  if (!$repeat_arg) {
    switch ($verb) {

      case 'GetRecord':
        islandora_oai_get_record($writer, $args);
        break;
      case 'Identify':
        $compress = FALSE;
        islandora_oai_identify($writer, $args);
        break;
      case 'ListIdentifiers':
        islandora_oai_list_id_rec($writer, $args);
        break;
      case 'ListMetadataFormats':
        islandora_oai_list_metadata_formats($writer, $args);
        break;
      case 'ListRecords':
        islandora_oai_list_id_rec($writer, $args, TRUE);
        break;
      case 'ListSets':
        islandora_oai_list_sets($writer, $args);
        break;
      case '':
        islandora_oai_add_error('noVerb');
        break;
      default:
        islandora_oai_add_error('badVerb', $verb);
    }
  }

  // Grab errors again for output.
  $error_list = islandora_oai_get_errors();

  //get all errors and add them to the response
  if ($error_list) {
    foreach ($error_list as $code => $verb) {
      $writer->startElement('error');
      $writer->writeAttribute('code', $code);
      $writer->text($verb);
      $writer->endElement();
    }
  }
  $writer->endDocument();
  $writer->flush();
}

/**
 * Returns errors generated during an OAI request.
 *
 * @return $error_text
 * */
function islandora_oai_get_errors() {
  //get the errors array and convert it to a string
  $errors = islandora_oai_add_error('get');

  //return false if no errors
  if (!count($errors)) {
    return FALSE;
  }
  return $errors;
}

/**
 * This function simply routs a request to add an error to the error function
 * in a way that makes sense (hopefully)
 *
 *  @param $code string
 *    error code to be added, or 'get' if we want to get the $error array
 *  @param $argument string
 *    the argument causing the error
 *  @param $value string
 *    the argument value causing the error
 *
 *  @return $errors array if $code is 'get' else no return value
 * */
function islandora_oai_add_error($code, $argument='', $value='') {
  return islandora_oai_errors($code, $argument, $value);
}

/**
 *  Define the oai2_errors based on OAI2 specification
 *  See : http://www.openarchives.org/OAI/openarchivesprotocol.html
 *
 *  This is a helper function for oai2forcck_add_error and oai2forcck_get_errors
 *  We must use a helper function here to make use of a static variable instead of globals
 *  We are basically faking a class (singlton?) with getter and setter methods
 *
 *  @param $code string
 *    error code to be added, or 'get' if we want to get the $error array
 *  @param $argument string
 *    the argument causing the error
 *  @param $value string
 *    the argument value causing the error
 *  @return
 *    Errors array if 'get', otherwise nothing
 */
function islandora_oai_errors($code, $argument='', $value='') {

  // store errors in a static array
  static $errors;

  //initialize $errors
  if (!is_array($errors)) {
    $errors = array();
  }

  switch ($code) {

    //return $errors if this is a get [errors] request
    case 'get':
      return $errors;

    //clear out errors and return nothing
    case 'reset':
      $errors = array();
      return;

    case 'badArgument' :
      $text = t("The argument '@argument' (value=@value) included in the request is not valid.", array('@argument' => $argument, '@value' => $value));
      break;

    case 'badGranularity' :
      $text = t("The value '@value' of the argument '@argument' is not valid.", array('@value' => $value, '@argument' => $argument));
      $code = 'badArgument';
      break;

    case 'badResumptionToken' :
      $text = t("The resumptionToken '@value' does not exist or has already expired.", array('@value' => $value));
      break;

    case 'badRequestMethod' :
      $text = t("The request method '@argument' is unknown.", array('@argument' => $argument));
      $code = 'badVerb';
      break;

    case 'badVerb' :
      $text = t("The verb '@argument' provided in the request is illegal.", array('@argument' => $argument));
      break;

    case 'cannotDisseminateFormat' :
      $text = t("The metadata format '@value' given by @argument is not supported by this repository.", array('@value' => $value, '@argument' => $argument));
      break;

    case 'exclusiveArgument' :
      $text = t('The usage of resumptionToken as an argument allows no other arguments.');
      $code = 'badArgument';
      break;

    case 'idDoesNotExist' :
      $text = t("The value '@value' of the identifier is illegal for this repository.", array('@value' => $value));
      break;

    case 'missingArgument' :
      $text = t("The required argument '@argument' is missing in the request.", array('@argument' => $argument));
      $code = 'badArgument';
      break;

    case 'noRecordsMatch' :
      $text = t('The combination of the given values results in an empty list.');
      break;

    case 'noMetadataFormats' :
      $text = t('There are no metadata formats available for the specified item.');
      break;

    case 'noVerb' :
      $text = t('The request does not provide any verb.');
      $code = 'badVerb';
      break;

    case 'noSetHierarchy' :
      $text = t('This repository does not support sets.');
      break;

    case 'sameArgument' :
      $text = t('Do not use the same argument more than once.');
      $code = 'badArgument';
      break;

    case 'sameVerb' :
      $text = t('Do not use verb more than once.');
      $code = 'badVerb';
      break;

    default:
      $text = t("Unknown error: code: '@code', argument: '@argument', value: '@value'", array('@code' => $code, '@argument' => $argument, '@value' => $value));
      $code = 'badArgument';
  }
  $errors[$code] = $text;
}

/**
 * Cleanup expired resumption tokens
 */
function islandora_oai_cron() {
  $expire_seconds = variable_get('oai2_expire_time', '86400');
  $expire_time = gmdate("Y-m-d G:i:s", (time() - $expire_seconds));
  db_query("DELETE FROM {oai2_tokens} WHERE timestamp < ':expire_time'", array(':expire_time' => $expire_time));
}

/**
 * Retrieve an individual metadata record from a repository
 *
 * @param $writer
 *   The XMLWriter object being passed by reference for constructing our output.
 *
 * @param $args
 *   Argument of the $_POST or $_GET request.
 */
function islandora_oai_get_record(&$writer, $args) {
  foreach ($args as $key => $val) {
    switch ($key) {
      case 'identifier':
        // Replace the first _ with a : so we have a pid
        $val = preg_replace('/_/', ':', $val, 1);
        // Strip off the the prefix such that we are left with a Fedora pid.
        $id_prefix = trim(variable_get('oai2_repository_identifier', 'drupal-site.org'));
        $identifier = str_replace('oai:' . $id_prefix . ':', '', $val);
        break;

      case 'metadataPrefix':
        $result = db_query("SELECT * FROM {oai2_metadata_formats} WHERE metadata_prefix=:metadata_prefix", array(':metadata_prefix' => $val));
        if ($result->rowCount() > 0) {
          $metadata_prefix = $val;
        }
        else {
          islandora_oai_add_error('cannotDisseminateFormat', $key, $val);
          return FALSE;
        }
        break;

      default:
        islandora_oai_add_error('badArgument', $key, $val);
        return FALSE;
    }
  }

  if (!isset($identifier)) {
    islandora_oai_add_error('missingArgument', 'identifier');
    return FALSE;
  }
  if (!isset($metadata_prefix)) {
    islandora_oai_add_error('missingArgument', 'metadataPrefix');
    return FALSE;
  }

  $results = islandora_oai_query_solr(0, 'PID', $identifier);
  $record = $results['objects'][0];

  if (!$record['PID']) {
    islandora_oai_add_error('idDoesNotExist', '', $identifier);
    return FALSE;
  }

  $writer->startElement('GetRecord');
  islandora_oai_build_record_response($writer, $record, TRUE, $metadata_prefix);
  $writer->endElement();
}

/**
 * Get the date granuality.
 *
 * @param $date
 *
 * @return The granularity of the date, or FALSE.
 */
function _islandora_oai_getDateGranularity($date) {
  if (preg_match("/^\d\d\d\d\-\d\d\-\d\d$/", $date)) {
    return 'YYYY-MM-DD';
  }
  elseif (preg_match("/^(\d\d\d\d\-\d\d\-\d\d)T(\d\d:\d\d:\d\d)Z$/", $date)) {
    return 'YYYY-MM-DDThh:mm:ssZ';
  }
  else {
    return FALSE;
  }
}

/**
 * Validate the date format (from or until in the request)
 *
 * @param $date datestring
 *
 * @return TRUE or FALSE
 */
function _islandora_oai_checkDateFormat($date) {
  static $granularity;
  $newGranularity = _islandora_oai_getDateGranularity($date);

  if (!$newGranularity) {
    return FALSE;
  }

  if ($granularity) {
    if ($granularity != $newGranularity) {
      return FALSE;
    }
  }
  else {
    $granularity = $newGranularity;
  }

  // Validate date based on granularity
  if ($granularity == 'YYYY-MM-DDThh:mm:ssZ') {
    $checkstr = '([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z';
  }
  else {
    $checkstr = '([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})';
  }

  if (ereg($checkstr, $date, $regs)) {
    if (checkdate($regs[2], $regs[3], $regs[1])) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Generate a random value for resumptionToken
 */
function _get_random_token() {
  return mt_rand(12345, mt_getrandmax());
}

/**
 * Provides the repository identity information
 *
 * @param $writer
 *   The XMLWriter object being passed by reference for constructing our output.
 *
 * @param $args
 *   Argument of the $_POST or $_GET request.
 *
 */
function islandora_oai_identify(&$writer, $args) {
  global $base_url;

  $error_text = islandora_oai_get_errors();

  // Catch for a bad argument.
  if (count($error_text) > 0 && (count($args) > 0)) {
    foreach ($args as $key => $val) {
      islandora_oai_add_error('badArgument', $key, $val);
      return FALSE;
    }
  }

  $earliest_datestamp = islandora_oai_get_earliest_datetime();
  $writer->startElement('Identify');
  $writer->writeElement('repositoryName', variable_get('oai2_repository_name', 'CCK OAI'));
  $writer->writeElement('baseURL', variable_get('oai2_path', 'oai2'));
  $writer->writeElement('protocolVersion', '2.0');
  $writer->writeElement('adminEmail', variable_get('oai2_admin_email', 'N/A'));
  $writer->writeElement('earliestDatestamp', $earliest_datestamp);
  $writer->writeElement('deletedRecord', 'no');
  $writer->writeElement('granularity', 'YYYY-MM-DDThh:mm:ssZ');
  $writer->writeElement('compression', 'yes');

  // Description
  $writer->startElement('description');

  // OAI Identifer
  $writer->startElement('oai-identifier');
  $writer->writeAttribute('xmlns', 'http://www.openarchives.org/OAI/2.0/oai-identifier');
  $writer->writeAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
  $writer->writeAttribute('xsi:schemaLocation', 'http://www.openarchives.org/OAI/2.0/oai-identifier
    http://www.openarchives.org/OAI/2.0/oai-identifier.xsd');
  $writer->writeElement('scheme', 'oai');
  $writer->writeElement('repositoryIdentifier', trim(variable_get('oai2_repository_identifier', 'drupal-site.org')));
  $writer->writeElement('delimiter', ':');
  $writer->writeElement('sampleIdentifier', 'oai:' . trim(variable_get('oai2_repository_identifier', 'drupal-site.org') . ':123'));
  $writer->endElement();
  $writer->endElement();
}

/**
 * Retrieve the earliest datetime of content using Fedora's RI.
 *
 * @return
 *   The earliest datestamp retrieved from Fedora.
 */
function islandora_oai_get_earliest_datetime() {
  static $earliest_datestamp;

  if (!$earliest_datestamp) {
    $object = islandora_object_load(variable_get('islandora_repository_pid', 'islandora:root'));

    $itql_query = 'select $object $date from <#ri>
                             where $object <info:fedora/fedora-system:def/model#label> $title
                             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
                             and $object <info:fedora/fedora-system:def/view#lastModifiedDate> $date
                             order by $date asc';

    $query_results = $object->repository->ri->itqlQuery($itql_query);
    $result = $query_results[0];
    $earliest_datestamp = $result['date']['value'];
    $earliest_datestamp = drupal_substr($earliest_datestamp, 0, -5) . 'Z';
  }
  return $earliest_datestamp;
}

function escapePhrase($value) {
  $pattern = '/("|:|[|]|\\\)/';
  $replace = '\\\$1';

  return preg_replace($pattern, $replace, $value);
}

/**
 * Returns the collection fields defined in the admin page in array format.
 *
 * @return array
 *   The membership info in an array of the form:
 *     array(
 *       array(field_1, prefix_1),
 *       array(field_2, prefix_2), ... and so on.
 *     )
 *
 */
function _islandora_oai_get_membership_array() {
  // Store in a static variable, to avoid reparsing within the same request.
  static $mini_cache = array();

  if (empty($mini_cache)) {
    foreach (preg_split('/(\\r?\\n|\\r)+/', variable_get('oai2_collection_field', 'rels.isMemberOfCollection\nrel.isMemberOf')) as $spec) {
      $split = preg_split('/[[:space:]]+~[[:space:]]+/', $spec);
      $split = array_filter($split, 'trim');
      if (count($split) === 1) {
        $split[] = '';
      }
      $mini_cache[] = $split;
    }
  }
  return $mini_cache;
}

/**
 * Function that performs the queries to Solr.
 *
 * @param int $start
 * @param string $field
 * @param string $query
 * @param boolean $set
 * @param boolean $date_query
 * @return
 *   The results generated from the solr query.
 */
function islandora_oai_query_solr($start = 0, $field = 'PID', $query = NULL, $set = NULL, $date_query = NULL) {
  global $user;

  $query_processor = new IslandoraSolrQueryProcessor();

  // Build the query string
  if (empty($query)) {
    $query = '*';
    $field = '*';
  }
  else {
    $query = escapePhrase("$query");
  }
  $query = $field . ':' . $query;
  $query_processor->buildQuery($query);

  // Grab the defined XACML fields to use in filtering content returned in our ITQL query.
  $xacml_role = variable_get('oai2_xacml_role_field', 'rels.isViewableByRole');
  $xacml_user = variable_get('oai2_xacml_user_field', 'rels.isViewableByUser');

  $query_processor->solrParams['fl'] = '*, PID, ' . variable_get('oai2_date_field', 'fgs.lastModifiedDate');

  if ($date_query) {
    $query_processor->solrParams['fq'][] = $date_query;
  }

  $exclude_content_models = variable_get('oai2_exclude_content_models', '');
  $exclude_content_models = explode("\n", $exclude_content_models);
  $has_model = variable_get('oai2_content_model_field', 'rels.hasModel');
  foreach ($exclude_content_models as $content_model) {
    $content_model = trim($content_model);
    if ($content_model) {
      $query_processor->solrParams['fq'][] = '(-' . $has_model . ':"' . $content_model . '")';
    }
  }
  if ($set) {
    // OAI uses : to separate multiple setSpecs so we had to replace it from the pids earlier
    $sets = explode(':', $set);
    $descendants = array();

    // Get all descendant children (collection and objs) and add to the sets array if not already existing.
    // Cannot constrain on collections only as name conventions may change across implementations
    foreach ($sets as $key => $value) {
      // Replace the first occurence of _ with a : so we are back to a valid pid
      $value = preg_replace('/_/', ':', $value, 1);
      $value = trim($value);
      $sets[$key] = $value;

      $itql_query = '
      select $child from <#ri>
      where
      (
        (
          (
          $child <fedora-model:hasModel> $model
          and $model <mulgara:is> <info:fedora/islandora:collectionCModel>
          and $parent_model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>
          )
        or
          (
          $child <fedora-model:hasModel> $model
          and $model <fedora-model:hasModel> $parent_model
          and $parent_model <mulgara:is> <info:fedora/islandora:collectionCModel>
          and $child <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
          )
        minus $child <http://islandora.ca/ontology/relsext#isViewableByRole> $role
        minus $child <http://islandora.ca/ontology/relsext#isViewableByUser> $user
        )
      or
        (
          (
          $child <fedora-model:hasModel> $model
          and $model <mulgara:is> <info:fedora/islandora:collectionCModel>
          and $parent_model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>
          )
        or
          (
          $child <fedora-model:hasModel> $model
          and $model <fedora-model:hasModel> $parent_model
          and $parent_model <mulgara:is> <info:fedora/islandora:collectionCModel>
          and $child <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
          )
      and
          (';
      foreach ($user->roles as $role) {
        $itql_query .= '$child <http://islandora.ca/ontology/relsext#isViewableByRole> ' . "'$role' or ";
      }
      $itql_query .= '$child <http://islandora.ca/ontology/relsext#isViewableByUser> ' . "'$user->name'" . ')';
      $itql_query .= ')
      )
    and
      (
      walk
        (
          $parent <fedora-rels-ext:isMemberOfCollection><info:fedora/' . $value . '>
           and $child <fedora-rels-ext:isMemberOfCollection> $parent
        )
      or
      walk
        (
          $parent <fedora-rels-ext:isMemberOf><info:fedora/' . $value . '>
          and $child <fedora-rels-ext:isMemberOf> $parent
        )
    )';

      $connection = islandora_get_tuque_connection();
      $query_results = $connection->repository->ri->itqlQuery($itql_query);

      foreach ($query_results as $result) {
        $walk_set = $result['child']['uri'];
        $walk_set = str_replace('info:fedora/', '', $walk_set);
        if (!in_array($walk_set, $descendants)) {
          $descendants[] = $walk_set;
        }
      }
    }
    $walked_sets = $descendants;

    $set = str_replace('_', ':', $set);
    $walked_sets[] = $set;
    $set_fq = array();

    foreach ($walked_sets as $walk) {
      foreach (_islandora_oai_get_membership_array () as $spec) {
        list($walk_field, $prefix) = $spec;
        $set_fq[] = $walk_field . ':"' . $prefix . $walk . '"';
      }
    }
    $query_processor->solrParams['fq'][] = '(' . implode(' OR ', $set_fq) . ')';
  }
  $limit = variable_get('oai2_max_size', '20');

  try {
    $query_processor->executeQuery();
    $solr_results = $query_processor->islandoraSolrResult['response'];
  } catch (Exception $e) {
    drupal_set_message(t('error searching @message', array('@message' => $e->getMessage())), 'error');
  }
  return $solr_results;
}

/**
 * Lists Identifiers or Records based on the value of $list_rec
 *
 * @param $writer
 *   The XMLWriter object being passed by reference for constructing our output.
 *
 * @param $args arguments of the Post or Get Request
 *
 * @param $list_rec
 *   if FALSE (or not supplied) function will list identifiers
 *   if TRUE function will list records
 */
function islandora_oai_list_id_rec(&$writer, $args, $list_rec=FALSE) {
  $query_args = array();
  $max_records = variable_get('oai2_max_size', '20'); //max records to send in one response
  $expire_seconds = variable_get('oai2_expire_time', '86400');
  $expire_time = gmstrftime('%Y-%m-%dT%TZ', time() + $expire_seconds);

  //------- handle error and set variables
  foreach ($args as $key => $val) {
    switch ($key) {
      case 'from':
        if (!isset($from)) {
          $from = $val;
        }
        else {
          islandora_oai_add_error('badArgument', $key, $val);
          return FALSE;
        }
        //ensure valid date/time format
        if (_islandora_oai_checkDateFormat($from)) {
          $from_time = _islandora_oai_datetime_to_time($from);
        }
        else {
          islandora_oai_add_error('badGranularity', 'from', $from);
          return FALSE;
        }
        break;

      case 'until':
        if (!isset($until)) {
          $until = $val;
        }
        else {
          islandora_oai_add_error('badArgument', $key, $val);
          return FALSE;
        }
        // Ensure valid date/time format
        if (_islandora_oai_checkDateFormat($until)) {
          $until_time = _islandora_oai_datetime_to_time($until);
        }
        else {
          islandora_oai_add_error('badGranularity', 'until', $until);
          return FALSE;
        }
        break;

      case 'set':
        if (!isset($set)) {
          $set = $val;
        }
        else {
          islandora_oai_error('badArgument', $key, $val);
          return FALSE;
        }
        break;

      case 'metadataPrefix':
        if (!isset($metadata_prefix)) {
          $result = db_query("SELECT * FROM {oai2_metadata_formats} WHERE metadata_prefix=:metadata_prefix ", array(':metadata_prefix' => $val));

          if ($result->rowCount() > 0 && !isset($metadata_prefix)) {
            $metadata_prefix = $val;
          }
          else {
            islandora_oai_add_error('cannotDisseminateFormat', $key, $val);
            return FALSE;
          }
        }
        else {
          islandora_oai_add_error('badArgument', $key, $val);
          return FALSE;
        }
        break;

      case 'resumptionToken':
        //if a resumptionToken is present, we cannot have any other arguments
        if (count($args) > 1) {
          islandora_oai_errors('clear');
          islandora_oai_add_error('exclusiveArgument');
          return FALSE;
        }
        elseif (!isset($resumption_token)) {
          $resumption_token = $val;
        }
        else {
          islandora_oai_add_error('badArgument', $key, $val);
          return FALSE;
        }
        break;

      default:
        islandora_oai_add_error('badArgument', $key, $val);
        return FALSE;
    }
  }

  // Resume previous session?
  if (isset($resumption_token)) {
    $token = islandora_oai_get_token($resumption_token);
    if (!is_object($token)) {
      return FALSE;
    }
    $query_args = explode('#', $token->queryargs);
    $set = $token->setargs;
    if (isset($query_args) && (!empty($query_args[0]) || !empty($query_args[1]))) {
      $from = $query_args[0];
      $until = $query_args[1];
    }
  }
  // Make a new session
  else {
    $token = new stdClass();
    $token->deliveredrecords = 0;
    $token->extquery = '';

    // Error checking
    if (!isset($metadata_prefix)) {
      islandora_oai_add_error('missingArgument', 'metadataPrefix');
      return FALSE;
    }

    if (isset($from) && isset($until)) {
      if ($from_time > $until_time) {
        islandora_oai_add_error('badArgument', 'until and from', $from . ' and ' . $until);
        return FALSE;
      }
    }
  }

  $field = 'PID';
  $query = NULL;
  $date_query = NULL;

  if (isset($from) || isset($until)) {
    $field = variable_get('oai2_date_field', 'fgs.lastModifiedDate');

    if (isset($from)) {
      $solr_from = _islandora_oai_datetime_to_solr_time($from);
    }
    else {
      $solr_from = '*';
    }

    if (isset($until)) {
      $solr_until = _islandora_oai_datetime_to_solr_time($until);
    }
    else {
      $solr_until = '*';
    }
    $date_query = "$field:[$solr_from TO $solr_until]";
  }

  if (!isset($set)) {
    $set = NULL;
  }

  $results = islandora_oai_query_solr($token->deliveredrecords, $field, $query, $set, $date_query);
  $num_rows = $results['numFound'];

  if ($num_rows) {
    if ($list_rec) {
      $writer->startElement('ListRecords');
    }
    else {
      $writer->startElement('ListIdentifiers');
    }
    foreach ($results['objects'] as $doc) {
      islandora_oai_build_record_response($writer, $doc, $list_rec, $metadata_prefix);
    }

    if ($num_rows - $token->deliveredrecords > $max_records) {
      if (!isset($metadata_prefix)) {
        $metadata_prefix = 'oai_dc';
      }
      $token_string = _get_random_token();
      $arg_string = implode("#", $query_args);
      $delivered_records = (int) $token->deliveredrecords + $max_records;

      db_insert('oai2_tokens')
          ->fields(array(
            'id' => $token_string,
            'deliveredrecords' => $delivered_records,
            'queryargs' => isset($arg_string) ? $arg_string : NULL,
            'setargs' => isset($set) ? $set : NULL,
            'metadata_prefix' => $metadata_prefix,
            'timestamp' => time(),
          ))
          ->execute();

      $token_xml = islandora_oai_write_token_xml($writer, $num_rows, $token->deliveredrecords, $expire_time, $token_string);
    }
    // Last delivery, return empty ResumptionToken
    elseif (isset($resumption_token)) {
      $token_xml = islandora_oai_write_token_xml($writer, $num_rows, $token->deliveredrecords);
    }
    $writer->endElement();
  }
  else {
    islandora_oai_add_error('noRecordsMatch');
    return FALSE;
  }
}

/**
 * Build a record response given a solr record.
 *
 * @param $writer
 *   The XMLWriter object being passed by reference for constructing our output.
 *
 * @param type $record
 *   Solr response record.
 *
 * @param boolean $full_record
 *   Whether to display one record or not.
 *
 * @param string $metadata_prefix
 *   The metadata prefix we are searching for.
 */
function islandora_oai_build_record_response(&$writer, $record, $full_record = FALSE, $metadata_prefix = 'oai_dc') {
  $identifier = $record['PID'];
  $identifier = str_replace(':', '_', $identifier);
  $repo_id = variable_get('oai2_repository_identifier', 'drupal-site.org');
  $date = new DateTime((string) $record['lastModifiedDate'], new DateTimeZone('UTC'));
  $date_stamp = $date->format("Y-m-d\TH:i:s\Z");

  $output = '';
  if ($full_record) {
    $writer->startElement('record');
  }

  $writer->startElement('header');
  $writer->writeElement('identifier', 'oai:' . $repo_id . ':' . $identifier);
  $writer->writeElement('datestamp', $date_stamp);

  foreach (_islandora_oai_get_membership_array () as $spec) {
    list($field, $prefix) = $spec;

    if (isset($record[$field])) {
      // Need to cast to array such that we can check for multiple collections
      foreach ((array) $record[$field] as $set) {
        $set = str_replace('info:fedora/', '', $set);
        if (empty($prefix) || (!empty($prefix) && strpos($set, $prefix) === 0)) {
          $set_spec = drupal_substr($set, drupal_strlen($prefix));
          $set_spec = str_replace(':', '_', $set_spec);
          $writer->writeElement('setSpec', $set_spec);
        }
      }
    }
  }

  $writer->endElement();

  // List record values
  if ($full_record) {
    $object = islandora_object_load($record['PID']);

    if ($metadata_prefix == 'oai_dc') {
      $param = variable_get('oai2_metadata_datastream_id_oai_dc', 'MODS');
    }
    else {
      $param = variable_get('oai2_metadata_datastream_id_oai_etdms', 'MODS');
    }

    if (isset($object[$param])) {
      $content = $object->repository->api->a->getDatastreamDissemination($object->id, $param);
    }
    else {
      $content = NULL;
    }

    $oai_output = NULL;

    if (!empty($content)) {
      $xslt = new XSLTProcessor();
      $XSL = new DOMDocument();
      switch ($metadata_prefix) {
        case 'oai_dc':
          $file = variable_get('oai2_transform_file_oai_dc', drupal_get_path('module', 'islandora_oai') . '/transforms/mods_to_dc_oai.xsl');
          break;
        case 'oai_etdms':
          $file = variable_get('oai2_transform_file_oai_etdms', drupal_get_path('module', 'islandora_oai') . '/transforms/mods_to_etdms.xsl');
          break;
        default:
          $file = drupal_get_path('module', 'islandora_oai') . '/transforms/mods_to_dc_oai.xsl';
      }
      if ($file != 'default') {
        $XSL->load($file);
        $input = new DomDocument();

        $did_load_ok = $input->loadXML($content);

        if ($did_load_ok) {
          $xslt->importStylesheet($XSL);
          $oai_output = $xslt->transformToXml($input);
        }
      }
      else {
        $oai_output = $content;
      }
    }

    // Transformation fails
    if (empty($oai_output) && isset($object[$param])) {
      watchdog('islandora_oai', 'The pid @pidname failed to transform on the @datastream datastream with the file @file',
          array(
            '@pidname' => $record['PID'],
            '@file' => $file,
            '@datastream' => $param,
          ), WATCHDOG_ERROR);
    }
    // Datastream doesn't exist
    elseif (!isset($object[$param])) {
      watchdog('islandora_oai', "The pid @pidname failed to transform on the @datastream datastream as the datastream doesn't exist",
          array(
            '@pidname' => $record['PID'],
            '@datastream' => $param,
          ), WATCHDOG_ERROR);
    }

    if (!empty($oai_output)) {
      $writer->startElement('metadata');
      $writer->writeRaw($oai_output);
      $writer->endElement();
    }
    // Close our record
    $writer->endElement();
  }
}

/**
 * Convert datetime dc format to timestamp.
 */
function _islandora_oai_datetime_to_time($datetime) {
  $time = strtotime($datetime);
  return $time;
}

/**
 * Convert datetime dc format to timestmap
 */
function _islandora_oai_datetime_to_solr_time($datetime) {
  $granularity = _islandora_oai_getDateGranularity($datetime);

  switch ($granularity) {
    case 'YYYY-MM-DD':
      return $datetime . 'T00:00:00Z/DAY';
      break;
    case 'YYYY-MM-DDThh:mm:ssZ':
      return $datetime;
      break;
  }
}

/**
 * Generate the resumption token given a token string.
 *
 * @param type $num_rows
 * @param type $delivered_records
 * @param type $expire_time
 * @param type $token
 * @return string
 *   Return the token XML if the token exists.
 *   If the token does not exist in db, return FALSE.
 */
function islandora_oai_write_token_xml($writer, $num_rows, $delivered_records, $expire_time = NULL, $token = NULL) {
  if ($token) {
    $writer->startElement('resumptionToken');
    $writer->writeAttribute('expirationDate', $expire_time);
    $writer->writeAttribute('completeListSize', $num_rows);
    $writer->writeAttribute('cursor', $delivered_records);
    $writer->text($token);
    $writer->endElement();
  }
  // Last delivery, return empty ResumptionToken
  else {
    $writer->startElement('resumptionToken');
    $writer->writeAttribute('completeListSize', $num_rows);
    $writer->writeAttribute('cursor', $delivered_records);
    $writer->endElement();
  }
}

/**
 * Retrieves a resumption token from the db.
 *
 * @param string $resumption_token
 *
 * @return
 *    Return the token string. If it does not exist return FALSE.
 */
function islandora_oai_get_token($resumption_token) {

  $token_query = db_query("SELECT * FROM {oai2_tokens} WHERE id= :resumptiontoken LIMIT 0,1", array(':resumptiontoken' => $resumption_token))->fetchObject();
  ;

  if ($token_query && $token_query->deliveredrecords) {
    return $token_query;
  }
  else {
    islandora_oai_add_error('badResumptionToken', '', $resumption_token);
    return FALSE;
  }
}

/**
 * List all the Metadata formats of this repository.
 *
 * @param $writer
 *   The XMLWriter object being passed by reference for constructing our output.
 *
 * @param $args
 *   Arguments of the $_GET or $_POST request.
 */
function islandora_oai_list_metadata_formats(&$writer, $args) {
  foreach ($args as $key => $val) {
    switch ($key) {
      case 'identifier':
        $repo_id = trim(variable_get('oai2_repository_identifier', 'drupal-site.org'));
        $identifier = str_replace('oai:' . $repo_id . ':', '', $val);

        $pid_query = str_replace('_', ':', $identifier);
        $pid_query = 'info:fedora/' . $pid_query;
        $itql_query = 'select $object $title from <#ri>
        where $object <fedora-model:label> $title and $object <mulgara:is> <' . $pid_query . '>';

        $connection = islandora_get_tuque_connection();
        $query_results = $connection->repository->ri->itqlQuery($itql_query);

        foreach ($query_results as $result) {
          $result_pid = $result['object']['uri'];
        }

        if (!$result_pid == $pid_query) {
          islandora_oai_add_error('idDoesNotExist', 'identifier', $identifier);
          return FALSE;
        }

        break;

      case 'metadataPrefix':
        $result = db_query("SELECT * FROM {oai2_metadata_formats} WHERE metadata_prefix=:metadata_prefix", array(':metadata_prefix' => $val));
        if ($result->rowCount() > 0) {
          $metadata_prefix = $val;
        }
        else {
          islandora_oai_add_error('cannotDisseminateFormat', $key, $val);
          return FALSE;
        }

        break;

      default:
        islandora_oai_add_error('badArgument', $key, $val);
        return FALSE;
    }
  }

  $list_meta_data_formats = array();
  $result = db_query("SELECT * FROM {oai2_metadata_formats}");

  foreach ($result as $fmt) {
    $list_meta_data_formats[] = array(
      'metadataPrefix' => $fmt->metadata_prefix,
      'schema' => $fmt->oai2_schema,
      'metadataNamespace' => $fmt->metadata_namespace,
    );
  }

  if (count($list_meta_data_formats) > 0) {
    $writer->startElement('ListMetadataFormats');
    foreach ($list_meta_data_formats as $entry) {
      $writer->startElement('metadataFormat');
      $writer->writeElement('metadataPrefix', $entry['metadataPrefix']);
      $writer->writeElement('schema', $entry['schema']);
      $writer->writeElement('metadataNamespace', $entry['metadataNamespace']);
      $writer->endElement();
    }
    $writer->endElement();
  }
  else {
    islandora_oai_add_error('noMetadataFormats');
  }
}

/**
 * ListSets of this repository implemented as a list of collections.
 *
 * @param $writer
 *   The XMLWriter object being passed by reference for constructing our output.
 *
 * @param $args
 *   Arguments of the $_POST or the $_GET request.
 */
function islandora_oai_list_sets($writer, $args) {
  global $user;

  foreach ($args as $key => $val) {
    switch ($key) {
      case 'resumptionToken':
        $resumption_token = $val;
        islandora_oai_add_error('badResumptionToken', $key, $val);
        return FALSE;
        break;

      default:
        islandora_oai_add_error('badArgument', $key, $val);
        return FALSE;
    }
  }

  $itql_query = 'select $object $title $model $parent_model $created from <#ri> where
    (
      (
        (
          $object <fedora-model:hasModel> $model
          and $model <mulgara:is> <info:fedora/islandora:collectionCModel>
          and $parent_model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>
        )
      or
        (
          $object <fedora-model:hasModel> $model
          and $model <fedora-model:hasModel> $parent_model
          and $parent_model <mulgara:is> <info:fedora/islandora:collectionCModel>
          and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
        )
      minus $object <http://islandora.ca/ontology/relsext#isViewableByRole> $role
      minus $object <http://islandora.ca/ontology/relsext#isViewableByUser> $user
    )
    or
    (
      (
        $object <fedora-model:hasModel> $model
        and $model <mulgara:is> <info:fedora/islandora:collectionCModel>
        and $parent_model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>
      )
      or
        (
          $object <fedora-model:hasModel> $model
          and $model <fedora-model:hasModel> $parent_model
          and $parent_model <mulgara:is> <info:fedora/islandora:collectionCModel>
          and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
        )
      and (';
  foreach ($user->roles as $role) {
    $itql_query .= '$object <http://islandora.ca/ontology/relsext#isViewableByRole> ' . "'$role' or ";
  }
  $itql_query .= '$object <http://islandora.ca/ontology/relsext#isViewableByUser> ' . "'$user->name'" . ')';
  $itql_query .= '
      )
  )
  and $object <fedora-model:label> $title
  and $object <fedora-model:createdDate> $created
  order by $title';

  $connection = islandora_get_tuque_connection();
  $query_results = $connection->repository->ri->itqlQuery($itql_query);

  $list_sets = '';

  $print_list_set = FALSE;
  foreach ($query_results as $result) {
    $pid_namespaces = array();
    foreach (explode(' ', trim(variable_get('fedora_pids_allowed', 'default: demo: changeme: islandora: ilives: '))) as $namespace) {
      $pid_namespaces[$namespace] = $namespace;
    }

    $temp = $result['object']['uri'];
    $setspec = substr($temp, strrpos($temp, '/') + 1);

    foreach ($pid_namespaces as $key => $namespace) {
      // Limit the spec to the namespaces allowed in our Drupal instance
      if (strpos($setspec, $namespace) === 0) {
        // Logic to print our ListSets only if we have valid records.
        // Will only fire once.
        if (!$print_list_set) {
          $writer->startElement('ListSets');
          $print_list_set = TRUE;
        }
        $writer->startElement('set');
        $setName = $result['title']['value'];

        if (empty($setName)) {
          $setName = t('Empty label');
        }
        $set_pid = str_replace(':', '_', $setspec);
        $writer->writeElement('setSpec', $set_pid);
        $writer->writeElement('setName', $setName);
        $writer->endElement();
      }
    }
  }
  // Need to close our ListSets element
  if ($print_list_set) {
    $writer->endElement();
  }
  else {
    islandora_oai_add_error('noSetHierarchy', $key, $val);
  }
}

/**
 * Hook that retrieves the default xsl files that ship with the OAI module and
 * scans the specified directory for any files that they have uploaded
 *
 * @return array
 */
function islandora_oai_islandora_oai_get_xsl_files() {
  $files = file_scan_directory(drupal_get_path('module', 'islandora_oai') . '/transforms/', '/.*\.xslt?$/');

  $transform_options = array();

  foreach ($files as $file) {
    $transform_options[$file->uri] = $file->filename;
  }

  $oai_uploaded_files = array();
  $upload_path = 'public://islandora_oai_xsls';
  $uploaded_files = file_scan_directory($upload_path, '/.*\.xslt?$/');

  foreach ($uploaded_files as $up_file) {
    $oai_uploaded_files[$up_file->uri] = $up_file->filename;
  }

  foreach ($oai_uploaded_files as $key => $file) {
    if (!in_array($file, $transform_options)) {
      $transform_options[$key] = $file;
    }
  }
  return $transform_options;
}

/**
 * Implements hook_islandora_solr_results_alter().
 */
function islandora_oai_islandora_solr_results_alter(&$search_results, $query_processor) {
  $last_modified_date = variable_get('oai2_date_field', 'fgs.lastModifiedDate');
  foreach ($search_results as $key => $value) {
    if (is_array($value['solr_doc'][$last_modified_date])) {
      $search_results[$key]['lastModifiedDate'] = $value['solr_doc'][$last_modified_date][0];
    }
    else {
      $search_results[$key]['lastModifiedDate'] = $value['solr_doc'][$last_modified_date];
    }
  }
}